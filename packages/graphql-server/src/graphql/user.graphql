# import PageInfo from "common.graphql"
# import Group, GroupCreateManyInput, GroupUpdateManyInput from "group.graphql"

type UserAnnouncement {
  id: ID!
  content: String
  expiryDate: String
}

type User {
  id: ID!
  username: String!
  email: String
  firstName: String
  lastName: String
  totp: Boolean
  isAdmin: Boolean
  enabled: Boolean
  enableInviteUsers: Boolean
  createdTimestamp: Float
  volumeCapacity: Int
  federated: Boolean
  groups: [Group]
  effectiveGroups: [Group]
  announcements: [UserAnnouncement]
  apiTokenCount: Int

  """todo: take following properties out when leo has time to implement customize component"""
  sendEmail: Boolean
  resetActions: [String]
  expiresIn: Int
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
}

"""User response"""
type UserActionResponse {
  id: String
}

type UserMultiEmailResponse {
  status: Boolean
}

"""Input"""

input ResetActionInput {
  set: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

input UserWhereInput {
  id: ID
  username_contains: String
  email_contains: String
  search: String
}

"""Mutation input"""
input UserCreateInput {
  username: String!
  email: String
  firstName: String
  lastName: String
  totp: Boolean
  isAdmin: Boolean
  enabled: Boolean
  createdTimestamp: Float
  volumeCapacity: Int
  federated: Boolean
  groups: GroupCreateManyInput
  sendEmail: Boolean
  resetActions: ResetActionInput
  expiresIn: Int
}

input UserUpdateInput {
  username: String
  email: String
  firstName: String
  lastName: String
  totp: Boolean
  isAdmin: Boolean
  enabled: Boolean
  enableInviteUsers: Boolean
  createdTimestamp: Float
  volumeCapacity: Int
  federated: Boolean
  groups: GroupUpdateManyInput
}

"""Relation input"""
input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
}

input UsersOrderBy {
  field: String
}
