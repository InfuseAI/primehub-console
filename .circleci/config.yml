version: 2.1
orbs:
  docker: circleci/docker@2.8.1
  codecov: codecov/codecov@4.2.0
commands:
  build_console:
    description: Build primehub-console images and push to Docker Hub
    parameters:
      tag:
        type: string
    steps:
      - docker/check
      # Build and push Primehub-console EE image
      - docker/build:
          step-name: "Docker build: primehub-console"
          image: infuseai/primehub-console
          tag: << parameters.tag >>
          dockerfile: packages/admin-server/Dockerfile
      - docker/push:
          step-name: "Docker push: primehub-console"
          image: infuseai/primehub-console
          tag: << parameters.tag >>
      - run:
          name: Tag short sha1 on latest
          command: |
            docker tag infuseai/primehub-console:<<parameters.tag>> infuseai/primehub-console:${CIRCLE_SHA1:0:7}
      - docker/push:
          step-name: "Docker push: primehub-console:shatag"
          image: infuseai/primehub-console
          tag: ${CIRCLE_SHA1:0:7}
  build_console_others:
    description: Build primehub-console images and push to Docker Hub
    parameters:
      tag:
        type: string
    steps:
      - docker/check
      # Build and push Primehub-console EE(Model Deployment only version) image
      - docker/build:
          step-name: "Docker build: primehub-console(model-deployment only)"
          image: infuseai/primehub-console-model-deploy
          tag: << parameters.tag >>
          dockerfile: packages/admin-server/overlay/model_deployment/Dockerfile
      - docker/push:
          step-name: "Docker push: primehub-console(model-deployment only)"
          image: infuseai/primehub-console-model-deploy
          tag: << parameters.tag >>
      - run:
          name: Tag short sha1 on latest
          command: |
            docker tag infuseai/primehub-console-model-deploy:<<parameters.tag>> infuseai/primehub-console-model-deploy:${CIRCLE_SHA1:0:7}
      - docker/push:
          step-name: "Docker push: primehub-console-model-deploy:shatag"
          image: infuseai/primehub-console-model-deploy
          tag: ${CIRCLE_SHA1:0:7}
      # Build and push Primehub-console CE image
      - docker/build:
          step-name: "Docker build: primehub-console (CE only)"
          image: infuseai/primehub-console-ce
          tag: << parameters.tag >>
          dockerfile: packages/admin-server/overlay/ce/Dockerfile
      - docker/push:
          step-name: "Docker push: primehub-console (CE only)"
          image: infuseai/primehub-console-ce
          tag: << parameters.tag >>
      - run:
          name: Tag short sha1 on latest
          command: |
            docker tag infuseai/primehub-console-ce:<<parameters.tag>> infuseai/primehub-console-ce:${CIRCLE_SHA1:0:7}
      - docker/push:
          step-name: "Docker push: primehub-console-ce:shatag"
          image: infuseai/primehub-console-ce
          tag: ${CIRCLE_SHA1:0:7}
  build_watcher:
    description: Build primehub-console-watcher images and push to Docker Hub
    parameters:
      tag:
        type: string
    steps:
      - docker/check
      # Build and push Primehub-console Watcher image
      - docker/build:
          step-name: "Docker build: primehub-console-watcher"
          image: infuseai/primehub-console-watcher
          tag: << parameters.tag >>
          dockerfile: packages/watcher/Dockerfile
      - docker/push:
          step-name: "Docker push: primehub-console-watcher"
          image: infuseai/primehub-console-watcher
          tag: << parameters.tag >>
      - run:
          name: Tag short sha1 on latest
          command: |
            docker tag infuseai/primehub-console-watcher:<<parameters.tag>> infuseai/primehub-console-watcher:${CIRCLE_SHA1:0:7}
      - docker/push:
          step-name: "Docker push: primehub-console-watcher:shatag"
          image: infuseai/primehub-console-watcher
          tag: ${CIRCLE_SHA1:0:7}
  build_graphql:
    description: Build primehub-console-graphql images and push to Docker Hub
    parameters:
      tag:
        type: string
    steps:
      - run:
          name: Set the segment write key
          command: |
            if [[ -n "${SEGMENT_WRITE_KEY}" ]]; then
              sed -i "s/const SEGMENT_WRITE_KEY.*/const SEGMENT_WRITE_KEY = \'${SEGMENT_WRITE_KEY}\';/g" \
                packages/graphql-server/src/utils/telemetry.ts
              echo "Segment write key replaced"
            fi
      - docker/check
      # Build and push Primehub-console GraphQL EE image
      - docker/build:
          step-name: "Docker build: primehub-console-graphql"
          image: infuseai/primehub-console-graphql
          tag: << parameters.tag >>
          dockerfile: packages/graphql-server/docker/ee/Dockerfile
      - docker/push:
          step-name: "Docker push: primehub-console-graphql"
          image: infuseai/primehub-console-graphql
          tag: << parameters.tag >>
      - run:
          name: Tag short sha1 on latest
          command: |
            docker tag infuseai/primehub-console-graphql:<<parameters.tag>> infuseai/primehub-console-graphql:${CIRCLE_SHA1:0:7}
      - docker/push:
          step-name: "Docker push: primehub-console-graphql:shatag"
          image: infuseai/primehub-console-graphql
          tag: ${CIRCLE_SHA1:0:7}
      # Build and push Primehub-console GraphQL CE image
      - docker/build:
          step-name: "Docker build: primehub-console-graphql(CE only)"
          image: infuseai/primehub-console-graphql-ce
          tag: << parameters.tag >>
          dockerfile: packages/graphql-server/docker/ce/Dockerfile
      - docker/push:
          step-name: "Docker push: primehub-console-graphql(CE only)"
          image: infuseai/primehub-console-graphql-ce
          tag: << parameters.tag >>
      - run:
          name: Tag short sha1 on latest
          command: |
            docker tag infuseai/primehub-console-graphql-ce:<<parameters.tag>> infuseai/primehub-console-graphql-ce:${CIRCLE_SHA1:0:7}
      - docker/push:
          step-name: "Docker push: primehub-console-graphql:shatag"
          image: infuseai/primehub-console-graphql-ce
          tag: ${CIRCLE_SHA1:0:7}

jobs:
  # Latest
  latest-console:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - setup_remote_docker:
          version: 27.3.1
      - build_console:
          tag: latest
  latest-console-others:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - setup_remote_docker:
          version: 27.3.1
      - build_console_others:
          tag: latest
  latest-graphql:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - setup_remote_docker:
          version: 27.3.1
      - build_graphql:
          tag: latest
  latest-watcher:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - setup_remote_docker:
          version: 27.3.1
      - build_watcher:
          tag: latest
  # Release
  release-console:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - setup_remote_docker:
          version: 27.3.1
      - build_console:
          tag: $CIRCLE_TAG
  release-console-others:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - setup_remote_docker:
          version: 27.3.1
      - build_console_others:
          tag: $CIRCLE_TAG
  release-graphql:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - setup_remote_docker:
          version: 27.3.1
      - build_graphql:
          tag: $CIRCLE_TAG
  release-watcher:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - setup_remote_docker:
          version: 27.3.1
      - build_watcher:
          tag: $CIRCLE_TAG
  # Tests
  graphql-lint:
    docker:
      - image: cimg/node:14.17.0
    steps:
      - checkout
      - run:
          name: Running tslint & tsc dryrun tests for graphql
          command: |
            cd packages/graphql-server
            yarn install
            yarn run test:build
  client-unit-test:
    docker:
      - image: cimg/node:14.17.0
    steps:
      - checkout
      - run:
          name: Prepare yarn dependencies
          command: |
            cd ~/project/packages/client
            yarn install
      - run:
          name: Install JUnit coverage reporter
          command: |
            cd ~/project/packages/client
            yarn add --dev jest-junit
      - run:
          name: Run Unit tests with JUnit as reporter
          command: |
            cd ~/project/packages/client
            yarn jest --verbose --silent --collectCoverage --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit
      - store_test_results:
          path: ./packages/client/reports/junit/
      - store_artifacts:
          path: ./packages/client/reports/junit
      - store_artifacts:
          path: ./packages/client/coverage
      - codecov/upload:
          flags: unittests
          file: ./packages/client/coverage/coverage-final.json
  graphql-unit-test:
    docker:
      - image: cimg/node:14.17.0
    steps:
      - checkout
      - run:
          name: Unit tests
          command: |
            cd ~/project/packages/graphql-server
            yarn install
            yarn test:unit

  graphql-integration-test:
    machine:
      #image: infuseai/primehub-ci:0.7.0-e2e
      image: ubuntu-2404:2024.08.1
    steps:
      - checkout
      - run:
          name: Integration tests
          command: |
            ./ci/ci-test.sh

workflows:
  version: 2
  build_and_push:
    jobs:
      - graphql-integration-test:
          filters:
            tags:
              only: /.*/
      - graphql-unit-test:
          filters:
            tags:
              only: /.*/
      - client-unit-test:
          filters:
            tags:
              only: /.*/
      - graphql-lint:
          filters:
            tags:
              only: /.*/
      - latest-console:
          requires:
            - client-unit-test
          filters:
            branches:
              only:
                - master
      - latest-console-others:
          requires:
            - client-unit-test
          filters:
            branches:
              only:
                - master
      - latest-graphql:
          requires:
            - graphql-lint
            - graphql-unit-test
            - graphql-integration-test
          filters:
            branches:
              only:
                - master
      - latest-watcher:
          filters:
            branches:
              only:
                - master
      - release-console:
          requires:
            - client-unit-test
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-console-others:
          requires:
            - client-unit-test
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-graphql:
          requires:
            - graphql-lint
            - graphql-unit-test
            - graphql-integration-test
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release-watcher:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
